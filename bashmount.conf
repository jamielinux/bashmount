#
# bashmount.conf
#

# Place in /etc/bashmount.conf for system wide configuration.
# Place in ~/.config/bashmount/config for per-user configuration.
# XDG_CONFIG_HOME is respected if it has been set.

# Set whether to or not to use udisksctl. The default is to autodetect whether
# it is available. This can be '0', '1', or 'auto'.
#udisks='auto'

# Set which sections to show in the output. These can be '0' or '1'.
# Bear in mind that hiding internal devices will also hide all luks volumes,
# regardless of whether they are from a removable device. You may be better off
# blacklisting internal volumes that you don't want to see.
#show_internal='1'
#show_removable='1'
#show_optical='1'
#show_commands='1'

# When device names are really long, we abbreviate the output slightly.
# Set whether to show the full device name regardless of the length.
# This can be '0' or '1'.
#show_full_device_names='0'

# Set whether to colourize the output. This can be '0' or '1'.
#colourize='1'

# Set whether to execute key commands instantly. This can be '0' or '1'.
#instant_key='1'

# Set default mount options.
#default_mount_options='--options nosuid,noexec,noatime'

# Set devices to blacklist. Any device whose "lsblk -P" output contains a string
# listed here will be hidden. The following key-value-pairs are printed:
# lsblk -dPno NAME,TYPE,FSTYPE,LABEL,MOUNTPOINT,PARTLABEL [device_name]
# The strings are matched using "grep -E".
#blacklist=()

###
### This example will match any device with "Photosmart" in any field.
### blacklist=( 'Photosmart' )
###
### This example will match the device found at /dev/sda1.
### blacklist=( 'NAME="sda1"' )
###
### This example will match /dev/sda1, /dev/sda2 and /dev/sda3.
### blacklist=( 'NAME="sda[1-3]"' )
###
### This example matches several different devices. Note that the array can be
### split over multiple lines for convenience.
### blacklist=( 'FSTYPE="ext3"' )
### blacklist+=( 'LABEL="secret"' 'PARTLABEL="secret"' )
### blacklist+=( 'MOUNTPOINT="/"' )
###

# Set filemanager command to use when performing the "open" command. The mount
# point is passed as the first argument. The default is to open the directory
# within your terminal.

# Uncomment this example to launch a graphical file manager.
#filemanager() {
#   /usr/bin/nautilus "$1" & >/dev/null 2>&1
#}

# Uncomment this example to launch midnight commander in a new window.
#filemanager() {
#   /usr/bin/uxterm -wf -e /usr/bin/mc "$1" & >/dev/null 2>&1
#}

# Customize the command used for mounting. You should not need to change this.
# Open /usr/bin/bashmount in a text editor to see the default commands.
# The device path /dev/sdx is passed as first argument.
#
# A simple example.
#mount_command() {
#   mount ${mount_options} "$1" "/mnt/${1##*/}"
#}
#unmount_command() {
#   umount "$1"
#}

# Set custom commands. Set "customX_show" to '0' to disable or '1' to enable.
# If enabled, the custom commands will be shown in the device sub-menu. The
# description and command functions can be set to anything you desire. The
# device name (e.g. /dev/sdb1) is passed as the first and only argument.
# A maximum of 3 custom actions are configurable.

#custom4_show='0'
#custom4_desc='changeme'
#custom4_command() {
#    mount --options remount,ro "$1" "/mnt/${1##*/}"
#}

#custom5_show='0'
#custom5_desc='changeme'
#custom5_command() {
#
#}

#custom6_show='0'
#custom6_desc='changeme'
#custom6_command() {
#
#}

# Set custom commands to be run automatically after mounting or unmounting.
# This is useful for spinning down a hard drive after unmounting it. The
# device name (e.g. /dev/sdb1) is passed as the first and only argument.
# Uncomment the examples below, or modify them to pass any arbitrary commands.
# post_mount is run immediately after a successful mount operation, and
# post_unmount is run immediately after a successful unmount operation.

# Set "run_post_mount" to '0' to disable or '1' to enable.
#run_post_mount='0'

# This example uses udisks to set the spindown timeout after mounting.
#post_mount() {
#   printf '\n'; msg 'Setting spindown timeout ...'
#   udisks --set-spindown "$1" --spindown-timeout 240
#}

# Set "run_post_unmount" to '0' to disable or '1' to enable.
#run_post_unmount='0'

# This example uses hd-idle to spin down the device after unmounting, but only
# if it is the only remaining mounted partition on the device.
#post_unmount() {
#   if ( ! mount | grep -q "^${1%%[0-9]*}" ); then
#       printf '\n'; msg 'Spinning down device ...'
#       dev=${1#/dev/}
#       hd-idle -t ${dev%%[0-9]*}
#   fi
#}
